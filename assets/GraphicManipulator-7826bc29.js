import{e as i,m as f,y as s,n as _}from"./cast-7928d7aa.js";import{n as S}from"./Evented-515b9d9c.js";import{t as g,r as n}from"./typedArrayUtil-a8b5b3e9.js";import{l as v,U as C}from"./reactiveUtils-f41a4e00.js";import{u as y,d as D,i as x}from"./screenUtils-410d12c0.js";import"./ensureType-cf29afa9.js";import{b as G}from"./vec2-2cef68de.js";import{x as w}from"./vec3-a020a6f6.js";import{n as $}from"./vec3f64-2f9cef06.js";import{A as P,r as H,g as E}from"./projection-d7b57a6c.js";import{l as I}from"./elevationInfoUtils-427916a5.js";import{J as O}from"./labelingInfo-5c3a46f6.js";import{x as R}from"./ElevationInfo-ce9cacc2.js";import{cE as A}from"./index-455b69b8.js";let e=class extends f{constructor(t){super(t),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.events=new S.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}set graphic(t){this._circleCollisionCache=null,this._originalSymbol=t.symbol,this._set("graphic",t),this.attachSymbolChanged()}get elevationInfo(){const t="elevationInfo"in this.graphic.layer&&this.graphic.layer.elevationInfo,r=I(this.graphic),l=t?t.offset:0;return new R({mode:r,offset:l})}set focusedSymbol(t){t!==this._get("focusedSymbol")&&(this._set("focusedSymbol",t),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(t){t!==this._get("grabbing")&&(this._set("grabbing",t),this._updateGraphicSymbol())}set hovering(t){t!==this._get("hovering")&&(this._set("hovering",t),this._updateGraphicSymbol())}set selected(t){t!==this._get("selected")&&(this._set("selected",t),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:t?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(t){const r=this.graphic;if(r.visible===!1)return null;const l=r.geometry;if(g(l))return null;const o=this._get("focusedSymbol"),p=n(o)?o:r.symbol;return this.view.type==="2d"?this._intersectDistance2D(this.view,t,l,p):this._intersectDistance3D(this.view,t,r)}attach(){this.attachSymbolChanged(),n(this.layer)&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),n(this.layer)&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=v(()=>{var t;return(t=this.graphic)==null?void 0:t.symbol},t=>{n(t)&&t!==this.focusedSymbol&&t!==this._originalSymbol&&(this._originalSymbol=t,this._focused&&n(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))},C)}detachSymbolChanged(){n(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&n(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(t,r,l,o){if(o=o||O(l),g(o))return null;const p=1;let a=this._circleCollisionCache;if(l.type!=="point"||o.type!=="simple-marker")return A(r,l,t)?p:null;if(g(a)||!a.originalPoint.equals(l)){const h=l,c=t.spatialReference;if(P(h.spatialReference,c)){const m=H(h,c);a={originalPoint:h.clone(),mapPoint:m,radiusPx:y(o.size)},this._circleCollisionCache=a}}if(n(a)){const h=D(r,M),c=t.toScreen(a.mapPoint),m=a.radiusPx,b=c.x+y(o.xoffset),d=c.y-y(o.yoffset);return G(h,[b,d])<m*m?p:null}return null}_intersectDistance3D(t,r,l){const o=t.toMap(r,{include:[l]});return o&&E(o,u,t.renderSpatialReference)?w(u,t.state.camera.eye):null}};i([s({constructOnly:!0,nonNullable:!0})],e.prototype,"graphic",null),i([s()],e.prototype,"elevationInfo",null),i([s({constructOnly:!0,nonNullable:!0})],e.prototype,"view",void 0),i([s({value:null})],e.prototype,"focusedSymbol",null),i([s({constructOnly:!0})],e.prototype,"layer",void 0),i([s()],e.prototype,"interactive",void 0),i([s()],e.prototype,"selectable",void 0),i([s()],e.prototype,"grabbable",void 0),i([s({value:!1})],e.prototype,"grabbing",null),i([s()],e.prototype,"dragging",void 0),i([s()],e.prototype,"hovering",null),i([s({value:!1})],e.prototype,"selected",null),i([s()],e.prototype,"cursor",void 0),e=i([_("esri.views.interactive.GraphicManipulator")],e);const u=$(),M=x();export{e as C};
