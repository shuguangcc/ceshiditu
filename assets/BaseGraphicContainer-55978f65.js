import{av as A,a3 as f,W as R,X as p,Y as D,ad as x,gB as E,hW as $,hX as O,a8 as C,h1 as I,a6 as L,hY as N,a7 as S,L as g,$ as m,T,a as w,I as F}from"./index-74d49a87.js";import{o as P}from"./FeatureContainer-83da4bfd.js";import{e as U}from"./color-803f68ad.js";const W=Math.PI/180,Y=4;class q extends A{constructor(i){super(),this._program=null,this._vao=null,this._vertexBuffer=null,this._indexBuffer=null,this._dvsMat3=f(),this._localOrigin={x:0,y:0},this._getBounds=i}destroy(){this._vao&&(this._vao.dispose(!0),this._vao=null,this._vertexBuffer=null,this._indexBuffer=null),this._program=R(this._program)}doRender(i){const{context:t}=i,n=this._getBounds();if(n.length<1)return;this._createShaderProgram(t),this._updateMatricesAndLocalOrigin(i),this._updateBufferData(t,n),t.setBlendingEnabled(!0),t.setDepthTestEnabled(!1),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1),t.setBlendFunction(p.ONE,p.ONE_MINUS_SRC_ALPHA),t.setColorMask(!0,!0,!0,!0);const h=this._program;t.bindVAO(this._vao),t.useProgram(h),h.setUniformMatrix3fv("u_dvsMat3",this._dvsMat3),t.gl.lineWidth(1),t.drawElements(D.LINES,8*n.length,x.UNSIGNED_INT,0),t.bindVAO()}_createTransforms(){return{dvs:f()}}_createShaderProgram(i){if(this._program)return;const t=`precision highp float;
        uniform mat3 u_dvsMat3;

        attribute vec2 a_position;

        void main() {
          mediump vec3 pos = u_dvsMat3 * vec3(a_position, 1.0);
          gl_Position = vec4(pos.xy, 0.0, 1.0);
        }`,n=`precision mediump float;
      void main() {
        gl_FragColor = vec4(0.75, 0.0, 0.0, 0.75);
      }`;this._program=i.programCache.acquire(t,n,v().attributes)}_updateMatricesAndLocalOrigin(i){const{state:t}=i,{displayMat3:n,size:h,resolution:u,pixelRatio:a,rotation:o,viewpoint:e}=t,d=W*o,{x:r,y}=e.targetGeometry,B=E(r,t.spatialReference);this._localOrigin.x=B,this._localOrigin.y=y;const c=a*h[0],_=a*h[1],b=u*c,M=u*_,l=$(this._dvsMat3);O(l,l,n),C(l,l,I(c/2,_/2)),L(l,l,N(h[0]/b,-_/M,1)),S(l,l,-d)}_updateBufferData(i,t){const{x:n,y:h}=this._localOrigin,u=2*Y*t.length,a=new Float32Array(u),o=new Uint32Array(8*t.length);let e=0,d=0;for(const r of t)r&&(a[2*e+0]=r[0]-n,a[2*e+1]=r[1]-h,a[2*e+2]=r[0]-n,a[2*e+3]=r[3]-h,a[2*e+4]=r[2]-n,a[2*e+5]=r[3]-h,a[2*e+6]=r[2]-n,a[2*e+7]=r[1]-h,o[d+0]=e+0,o[d+1]=e+3,o[d+2]=e+3,o[d+3]=e+2,o[d+4]=e+2,o[d+5]=e+1,o[d+6]=e+1,o[d+7]=e+0,e+=4,d+=8);if(this._vertexBuffer?this._vertexBuffer.setData(a.buffer):this._vertexBuffer=g.createVertex(i,m.DYNAMIC_DRAW,a.buffer),this._indexBuffer?this._indexBuffer.setData(o):this._indexBuffer=g.createIndex(i,m.DYNAMIC_DRAW,o),!this._vao){const r=v();this._vao=new T(i,r.attributes,r.bufferLayouts,{geometry:this._vertexBuffer},this._indexBuffer)}}}const v=()=>U("bounds",{geometry:[{location:0,name:"a_position",count:2,type:x.FLOAT}]});let H=class extends P{constructor(s){super(s),this.hasHighlight=()=>!0}destroy(){super.destroy(),this._boundsRenderer=w(this._boundsRenderer)}enableRenderingBounds(s){this._boundsRenderer=new q(s),this.requestRender()}get hasLabels(){return!1}onTileData(s,i){s.patch(i),this.contains(s)||this.addChild(s),this.requestRender()}onTileError(s){s.clear(),this.contains(s)||this.addChild(s)}_renderChildren(s,i){for(const t of this.children)t.isReady&&t.hasData&&(t.commit(s),s.context.setStencilFunction(F.EQUAL,t.stencilRef,255),t.getDisplayList().replay(s,t,i))}};export{H as n};
