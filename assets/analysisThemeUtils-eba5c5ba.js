import{d as h,$ as s}from"./unitUtils-47abac71.js";import{x as o}from"./screenUtils-410d12c0.js";import{o as p,v as _}from"./vec2-2cef68de.js";import{o as d,u as R,g as P}from"./vec3-a020a6f6.js";import{l as n}from"./Color-a42a8267.js";import{b as c}from"./Error-653283ae.js";import{u as U}from"./colorUtils-4aa5b1d6.js";const j={readOnly:!0,get(){return h(this.view)}};var a;(function(e){e[e.Auto=0]="Auto",e[e.Euclidean=1]="Euclidean",e[e.Geodesic=2]="Geodesic"})(a||(a={}));function q(e,t){if(d(t,0,0,0),e.length>0){for(let r=0;r<e.length;++r)R(t,t,e[r]);P(t,t,1/e.length)}}function C(e,t,r,i){i.projectToRenderScreen(e,u),i.projectToRenderScreen(t,l),p(r,g,$),_(r,r)}const u=o(),$=u,l=o(),g=l;let F=class{constructor(t=null){this.spatialReference=t}get spatialReference(){return this._spatialReference}set spatialReference(t){t!==this._spatialReference&&(this._spatialReference=t,this._updateNormalizationFactors())}normalizeDistance(t){return t*this._metersPerDistanceUnit}normalizeElevation(t){return t*this._metersPerElevationUnit}normalizeArea(t){return t*this._squareMetersPerAreaUnit}_updateNormalizationFactors(){this._metersPerDistanceUnit=s(this._spatialReference,1),this._metersPerElevationUnit=s(this._spatialReference,1),this._squareMetersPerAreaUnit=this._metersPerDistanceUnit*this._metersPerDistanceUnit}};function m(e,t){const r=e.a*t;return U(e)>225?new n([0,0,0,r]):new n([255,255,255,r])}function f(e,t){const r=new n(e);return r.a*=t,r}function v(e=1){return f(c.analysisTheme.accentColor,e)}function M(e=1){return m(v(),e)}function z(e=1){return f(c.analysisTheme.textColor,e)}function N(e=1){return m(z(),e)}export{z as a,q as c,a as e,C as f,v as i,j as r,N as s,F as t,M as u};
