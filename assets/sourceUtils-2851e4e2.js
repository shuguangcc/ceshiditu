import{gW as m,gX as p,gV as y,fK as w,gY as I,dP as f,t as h,_}from"./index-4acc98f2.js";class b{constructor(){this.code=null,this.description=null}}class v{constructor(t){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new v(e)}class P{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function j(e){return new P(e)}const a=new Set;function F(e,t,i,g=!1,u){a.clear();for(const r in i){const n=e.get(r);if(!n)continue;const l=i[r],s=q(n,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:s}}),a.add(n.name),n&&(g||n.editable)){const c=m(n,s);if(c)return d(p(c,n,s));t[n.name]=s}}for(const r of(e==null?void 0:e.requiredFields)??[])if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function q(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(i=String(t)),I(i)}let o;function G(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function V(){return h(o)&&(o=await _(()=>import("./geometryEngineJSON-1e940afe.js"),["./geometryEngineJSON-1e940afe.js","./geometryEngineBase-e1a33b0a.js","./geometryEngineJSON-3f330436.js","./json-48e3ea08.js"],import.meta.url)),o}async function S(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await V()}export{d as a,j as f,G as g,F as m,S as w};
