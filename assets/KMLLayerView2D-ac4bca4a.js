import{ao as z,di as k,fE as $,p6 as F,S as U,ag as I,ah as D,ai as L,ab as j,M as W,aj as H,ak as Y,pk as q,U as K,oV as M,bd as J,l as Q,aw as X,a as S,aG as G,u as R,B as Z,dh as tt,aL as N,pl as et,pm as B,io as it,pn as at,e as V,y as v,b as st}from"./index-74d49a87.js";import{b as P,g as rt,d as ot}from"./kmlUtils-05d9f96b.js";import{T as nt,S as lt,R as ht}from"./Bitmap-2a86165d.js";import{a as pt}from"./BitmapContainer-11eb2efa.js";import{f as mt}from"./LayerView2D-eda09360.js";import{i as T}from"./GraphicContainer-acd65922.js";import{a as E}from"./GraphicsView2D-1264803b.js";import{u as ct}from"./LayerView-7b372130.js";import{C as dt,$ as gt}from"./rasterProjectionHelper-2a66ec39.js";import{n as ut}from"./WGLContainer-576ad576.js";import{o as _t}from"./MaterialPrograms-4b9f49a6.js";import"./enums-b1d611e3.js";import"./Container-2d36bc3e.js";import"./definitions-19bfb61c.js";import"./BaseGraphicContainer-55978f65.js";import"./FeatureContainer-83da4bfd.js";import"./AttributeStoreView-f7f49a44.js";import"./visualVariablesUtils-2780c14d.js";import"./color-803f68ad.js";import"./enums-4b2a86a0.js";import"./number-b10bd8f5.js";import"./visualVariablesUtils-6ff5fadd.js";import"./TileContainer-931ccd0f.js";import"./utils-f5f1a968.js";import"./MaterialKey-d0fce869.js";import"./alignmentUtils-ae955d28.js";import"./cimAnalyzer-02b73f26.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./normalizeUtilsSync-e634818e.js";import"./projectionSupport-23b402d8.js";import"./json-48e3ea08.js";import"./Matcher-c4e44d26.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-24df9e47.js";import"./GeometryUtils-dd03fc25.js";import"./ExpandedCIM-0010872c.js";import"./schemaUtils-5a41d104.js";import"./util-2bf6e249.js";import"./ComputedAttributeStorage-167c4551.js";import"./arcadeTimeUtils-999b74fd.js";import"./executionError-fb3f283a.js";import"./centroid-d1553553.js";import"./GraphicsView-bef23e3b.js";import"./WGLBrushVTLSymbol-b759c30b.js";import"./StyleDefinition-7d58136b.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-e0452ecc.js";import"./heatmapTextureUtils-0aa3a2bc.js";import"./programUtils-f035fe8a.js";class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new z(i,{})}const s={applyProjection:!0,bilinear:!1,bicubic:!1},r=_t("raster/reproject","raster/reproject",new Map([["a_position",0]]),s);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ut(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,s,r=!1){const i=k(t.extent,s),a=new $({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:l}=dt(a,s,t.extent);let h=(o+l)/2;const n=Math.round((i.xmax-i.xmin)/h),d=Math.round((i.ymax-i.ymin)/h);h=(i.width/n+i.height/d)/2;const C=new $({x:h,y:h,spatialReference:i.spatialReference}),w=gt({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),x=F(this._rctx,w),u=new U(this._rctx,{width:n,height:d,pixelFormat:I.RGBA,dataType:D.UNSIGNED_BYTE,wrapMode:L.CLAMP_TO_EDGE,samplingMode:j.LINEAR,hasMipmap:!1}),m=new W(this._rctx,{colorTarget:H.TEXTURE,depthStencilTarget:Y.NONE,width:n,height:d},u);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:y=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",y,f),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),r){const{width:_=0,height:c=0}=m.descriptor,b=new ImageData(_,c);return m.readPixels(0,0,_,c,I.RGBA,D.UNSIGNED_BYTE,b.data),m.detachColorTexture(q.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i,imageData:b}}return m.detachColorTexture(q.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i}}reprojectBitmapData(t,s){const r=nt(t.bitmapData)?lt(t.bitmapData):t.bitmapData,i=new U(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:I.RGBA,dataType:D.UNSIGNED_BYTE,wrapMode:L.CLAMP_TO_EDGE,samplingMode:j.LINEAR,hasMipmap:!1},r),a=this.reprojectTexture({texture:i,extent:t.extent},s,!0);a.texture.dispose();const o=document.createElement("canvas"),l=a.imageData;return o.width=l.width,o.height=l.height,o.getContext("2d").putImageData(l,0,0),{bitmapData:o,extent:a.extent}}async loadAndReprojectBitmapData(t,s,r){const i=(await K(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const o=a.getContext("2d");o.drawImage(i,0,0);const l=o.getImageData(0,0,a.width,a.height);if(s.spatialReference.equals(r))return{bitmapData:l,extent:s};const h=this.reprojectBitmapData({bitmapData:l,extent:s},r);return{bitmapData:h.bitmapData,extent:h.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}}p._instanceRefCount=0;class O{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends mt(ct){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new pt,this._kmlVisualData=new O,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new J}async hitTest(e,t){var r,i,a;const s=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(o=>(o.layer=s,o.sourceLayer=s,{type:"graphic",graphic:o,layer:s,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new E({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new E({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new E({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),Q(()=>this.layer.visibleSublayers,e=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const t of e){const s=this._kmlVisualData.allSublayers.get(t.id);s&&(s.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new p}detach(){this._fetchController=X(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,s;((t=this.view.spatialReference)!=null&&t.isWGS84||(s=this.view.spatialReference)!=null&&s.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,G.fromJSON(e.extent),this.view.spatialReference).then(r=>{const i=new ht(r.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=r.extent.xmin,i.y=r.extent.ymax,i.resolution=r.extent.width/r.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:s,viewBoundScale:r,httpQuery:i}=e;if(R(s)){if(Z(t))throw new Error("Loading this network link requires a view state.");let a;if(await tt(),R(r)&&r!==1){const c=new G(t.extent);c.expand(r),a=c}else a=t.extent;a=k(a,N.WGS84);const o=k(a,N.WebMercator),l=a.xmin,h=a.xmax,n=a.ymin,d=a.ymax,C=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,x=Math.max(o.width,o.height),u={"[bboxWest]":l.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":C.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":et,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const b in c)for(const A in u)c[b]=c[b].replace(A,u[A])},y=B(s);m(y);let f={};R(i)&&(f=B(i),m(f));const _=it(e.href);return _.query={..._.query,...y,...f},`${_.path}?${at(y)}`}return e.href}async _fetchService(e){const t=new O;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,s){return this._fetchParsedKML(e,s).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await P(i.points):[],o=i.polylines?await P(i.polylines):[],l=i.polygons?await P(i.polygons):[],h=i.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:i.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:i.id}))),t.allPolygons.push(...l.map(n=>({item:n,sublayerId:i.id}))),t.allMapImages.push(...h.map(n=>({item:n,sublayerId:i.id}))),i.networkLink){const n=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(n,t,s)}}})}_fetchParsedKML(e,t){return rt(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(s=>ot(s.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};V([v()],g.prototype,"_pointsView",void 0),V([v()],g.prototype,"_polylinesView",void 0),V([v()],g.prototype,"_polygonsView",void 0),V([v()],g.prototype,"updating",void 0),g=V([st("esri.views.2d.layers.KMLLayerView2D")],g);const ge=g;export{ge as default};
