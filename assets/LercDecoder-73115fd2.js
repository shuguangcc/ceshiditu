import{C as c,r as d,e as _}from"./typedArrayUtil-a8b5b3e9.js";import{c as m}from"./cast-7928d7aa.js";import{s as u}from"./Error-653283ae.js";import{f}from"./promiseUtils-6684e352.js";import{u as p}from"./workers-898a7c4c.js";class v{constructor(e,t,s,o,n={}){this._mainMethod=t,this._transferLists=s,this._listeners=[],this._promise=p(e,{...n,schedule:o}).then(h=>{if(this._thread===void 0){this._thread=h,this._promise=null,n.hasInitialize&&this.broadcast({},"initialize");for(const l of this._listeners)this._connectListener(l)}else h.close()}),this._promise.catch(h=>u.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${h}`))}on(e,t){const s={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(s),this._connectListener(s),m(()=>{s.removed=!0,c(this._listeners,s),this._thread&&d(s.threadHandle)&&s.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const o=this._transferLists[e],n=o?o(t):[];return this._thread.invoke(e,t,{transferList:n,signal:s})}return this._promise?this._promise.then(()=>(f(s),this.invokeMethod(e,t,s))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class a extends v{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,s){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},s):Promise.resolve(null)}release(){--this.ref<=0&&(i.forEach((e,t)=>{e===this&&i.delete(t)}),this.destroy())}}const i=new Map;function M(r=null){let e=i.get(_(r));return e||(d(r)?(e=new a(t=>r.schedule(t)),i.set(r,e)):(e=new a,i.set(null,e))),++e.ref,e}export{v as h,M as n};
