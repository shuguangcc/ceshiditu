import{e as n,y as p,n as R}from"./cast-7928d7aa.js";import{g as B}from"./Graphic-b46e2684.js";import{s as _}from"./Error-653283ae.js";import{r as u,e as $}from"./typedArrayUtil-a8b5b3e9.js";import{x as q,j as v,E as V}from"./promiseUtils-6684e352.js";import{l as f,w as x,U as E,h as W}from"./reactiveUtils-f41a4e00.js";import"./ensureType-cf29afa9.js";import{m as C}from"./multidimensionalUtils-0cd7c92c.js";import{y as O,d as M}from"./RasterVFDisplayObject-96332116.js";import{y as A}from"./LayerView2D-9c021b91.js";import{u as D}from"./aaBoundingRect-4a760199.js";import{a0 as Q}from"./index-455b69b8.js";import{p as j,b as H,d as J}from"./WGLContainer-14075e1a.js";import{e as T}from"./mat3f32-d3d088e8.js";import{a as L}from"./EffectView-d3bf37ed.js";import{I}from"./enums-4ca4641f.js";import{i as F}from"./TileContainer-07bccb79.js";import"./geometry-5a216427.js";import{d as N}from"./HandleOwner-e1406413.js";import{a as X,w as Y}from"./Extent-69509002.js";import{g as K,s as Z}from"./pixelUtils-c27b13a1.js";import{j as ee}from"./TileInfo-34f80a8e.js";import{g as U,f as z,u as te,a as ie}from"./RawBlockCache-0f6e3c3f.js";import{U as re,i as se}from"./rasterProjectionHelper-967d22a7.js";import{r as k,y as oe}from"./TileStrategy-4189758f.js";import{h as ae}from"./TileStore-787dbea4.js";import"./TileKey-0750ad58.js";import{l as le}from"./capabilities-3636c6a4.js";import{r as G}from"./util-38c30a14.js";import{j as ne}from"./dataUtils-a4eff43b.js";import{s as he,i as pe}from"./mat3-3fc68e72.js";import{f as me}from"./ImageryTileLayerView-283faa2a.js";import{u as ce}from"./LayerView-b83ced89.js";import{i as ue}from"./RefreshableLayerView-1faf24ee.js";import"./string-cdf077e6.js";import"./nextTick-3ee5a785.js";import"./PopupTemplate-6eb885db.js";import"./Clonable-ba795b08.js";import"./Collection-78126e82.js";import"./Evented-515b9d9c.js";import"./SimpleObservable-7dcdef1d.js";import"./fieldUtils-31bfecd2.js";import"./preload-helper-41c905a7.js";import"./arcadeOnDemand-c6d1b9f2.js";import"./jsonMap-c1f958cf.js";import"./enumeration-3c281341.js";import"./number-347a3a44.js";import"./locale-30120714.js";import"./Identifiable-aa6d459d.js";import"./symbols-fa594797.js";import"./CIMSymbol-1379245a.js";import"./Symbol-fc4312a4.js";import"./Color-a42a8267.js";import"./colorUtils-639f4d25.js";import"./mathUtils-2519596a.js";import"./vec3-a020a6f6.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./vec4-790471c0.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-243aae26.js";import"./symbolLayerUtils3D-1f8d4478.js";import"./aaBoundingBox-fc742a4e.js";import"./request-d3e98716.js";import"./persistableUrlUtils-a16d0f55.js";import"./Symbol3DAnchorPosition2D-c0f4a14d.js";import"./collectionUtils-3831b7c4.js";import"./Portal-8b65c9c4.js";import"./Loadable-48bc1293.js";import"./Promise-dfdee8ba.js";import"./PortalGroup-bfe93c76.js";import"./PortalUser-4c8e1adc.js";import"./Ellipsoid-89682c5e.js";import"./jsonUtils-03c4af61.js";import"./Polyline-bf268e7b.js";import"./FramebufferObject-50e1b68f.js";import"./enums-64ab819c.js";import"./Texture-e79b14e7.js";import"./context-util-1e3c8cfc.js";import"./VertexElementDescriptor-2925c6af.js";import"./vec2f32-461e65a9.js";import"./Utils-b2b4cf0c.js";import"./number-954e4ab6.js";import"./enums-4b2a86a0.js";import"./utils-26560131.js";import"./MaterialKey-406a59ab.js";import"./alignmentUtils-ae955d28.js";import"./definitions-2d0dd0cd.js";import"./heatmapUtils-84e8c43b.js";import"./vec4f64-e407da96.js";import"./Basemap-a8f7f439.js";import"./deprecate-b9088bd3.js";import"./loadAll-7fd968fe.js";import"./asyncUtils-62e8a185.js";import"./PortalItem-aa42c739.js";import"./assets-0b172f07.js";import"./messages-be07754e.js";import"./writeUtils-067c4f82.js";import"./layerUtils-034678f6.js";import"./compilerUtils-034cacb8.js";import"./CollectionFlattener-3dd1f479.js";import"./TablesMixin-e7a6aab1.js";import"./Layer-f0696768.js";import"./Cyclical-b66238c6.js";import"./workers-898a7c4c.js";import"./Connection-a681777e.js";import"./Queue-3a0c055d.js";import"./intl-f1e98361.js";import"./projection-d7b57a6c.js";import"./unitUtils-47abac71.js";import"./mat4-44a0988f.js";import"./zscale-1e1fc911.js";import"./widget-f7489a3f.js";import"./uuid-73213768.js";import"./dom-5b7af1bf.js";import"./byteSizeEstimations-f0cab514.js";import"./executeQueryJSON-bcd96e1a.js";import"./normalizeUtils-ee4bf39f.js";import"./query-922e6fbf.js";import"./pbfQueryUtils-72f9b45b.js";import"./pbf-e1a6c35b.js";import"./OptimizedFeature-3de538c1.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-d9d8ef40.js";import"./FeatureSet-0573546e.js";import"./Field-f5fc9f6b.js";import"./fieldType-b1002185.js";import"./typeUtils-eb9416d0.js";import"./Query-ff8c2cfb.js";import"./TimeExtent-744afd75.js";import"./RelationshipQuery-db5fcd0c.js";import"./LegendOptions-e65e7a9c.js";import"./utils-725f8b4e.js";import"./BlendLayer-d8293c8d.js";import"./parser-2b40deea.js";import"./mat4f32-77b3d8ac.js";import"./ItemCache-ee28c7ba.js";import"./MemCache-4b976a8b.js";import"./cimSymbolUtils-2e4dde89.js";import"./utils-c81a5c52.js";import"./jsonUtils-c56f8821.js";import"./UniqueValueRenderer-103ec66d.js";import"./diffUtils-1ac65748.js";import"./colorRamps-3a8ac20b.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-c59ab38d.js";import"./lengthUtils-d2d33f94.js";import"./jsonUtils-d7db3dc7.js";import"./styleUtils-4adfed9e.js";import"./DictionaryLoader-2cf5144e.js";import"./LRUCache-14115d91.js";import"./featureConversionUtils-01cdde8a.js";import"./TopFeaturesQuery-785f5453.js";import"./FeatureLayer-a9f3e6ec.js";import"./MultiOriginJSONSupport-27362d57.js";import"./LayerFloorInfo-2cd5e8ae.js";import"./FeatureLayerBase-aebdf2da.js";import"./HeightModelInfo-22ad72d7.js";import"./arcgisLayerUrl-0b2b7691.js";import"./OperationalLayer-24e6fa34.js";import"./ElevationInfo-ce9cacc2.js";import"./editsZScale-2015e7db.js";import"./APIKeyMixin-34d76a46.js";import"./ArcGISService-ea748edf.js";import"./CustomParametersMixin-807d2055.js";import"./EditBusLayer-40671d1a.js";import"./FeatureReductionLayer-4077b2ae.js";import"./labelingInfo-5c3a46f6.js";import"./labelUtils-a194a22a.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-e7edf19c.js";import"./PortalLayer-f1a64f99.js";import"./RefreshableLayer-1c078c47.js";import"./ScaleRangeLayer-271178b7.js";import"./TemporalLayer-39c07299.js";import"./TimeInfo-c89d0ef4.js";import"./FeatureTemplate-746d033e.js";import"./FeatureType-c83c5f49.js";import"./fieldProperties-7547b373.js";import"./FieldsIndex-aa6dd3fa.js";import"./versionUtils-92993d41.js";import"./styleUtils-da81b13f.js";import"./popupUtils-07fe66a7.js";import"./colorUtils-82440b70.js";import"./mat2d-d0b91e3e.js";import"./Scheduler-8433672d.js";import"./GraphicsLayer-10573c27.js";import"./ViewingMode-5d7d590b.js";import"./enums-0fc02184.js";import"./vec2-2cef68de.js";import"./vec2f64-30dc1443.js";import"./sphere-4f5e644f.js";import"./mat3f64-c6305894.js";import"./mat4f64-1e28eae0.js";import"./quatf64-7fd38d64.js";import"./lineSegment-e6f72ff2.js";import"./plane-45609588.js";import"./scaleUtils-b32a50d8.js";import"./ElevationSamplerData-7decf898.js";import"./PhysicallyBasedRendering.glsl-a986c926.js";import"./View.glsl-8b12b8c2.js";import"./ShaderBuilder-93e8045e.js";import"./FloatPassUniform-d2dfc562.js";import"./Float4PassUniform-3a47b7b3.js";import"./RgbaFloatEncoding.glsl-6036ca34.js";import"./Texture2DPassUniform-6e8ae673.js";import"./vec3f32-c9aa289f.js";import"./VertexAttribute-9c5c630d.js";import"./Texture2DDrawUniform-22924c6f.js";import"./basicInterfaces-19ed850e.js";import"./PiUtils.glsl-0c0898f0.js";import"./ReadLinearDepth.glsl-7ff30f7d.js";import"./WaterSurface.glsl-fc8a5726.js";import"./ForwardLinearDepth.glsl-36f9eb3b.js";import"./Matrix3PassUniform-da8eddae.js";import"./Slice.glsl-a612de15.js";import"./Transform.glsl-f15542a7.js";import"./OutputHighlight.glsl-7364b03b.js";import"./MultipassTerrainTest.glsl-e79d40de.js";import"./NormalUtils.glsl-a59958d7.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-cd195b0e.js";import"./EvaluateSceneLighting.glsl-3bbc6edf.js";import"./VisualVariablePassParameters-5807c7dc.js";import"./Util-a48361c6.js";import"./SSAOBlur.glsl-c6f142fc.js";import"./ScreenSpacePass-00f8c8a4.js";import"./SSAO.glsl-6f3b4065.js";import"./ShaderTechniqueConfiguration-9f5b4555.js";import"./HUD.glsl-80cf9a21.js";import"./VerticalOffset.glsl-86460edb.js";import"./objectResourceUtils-ef6e3cdf.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-646ba1de.js";import"./vec33-ce3aa99b.js";import"./DefaultMaterial_COLOR_GAMMA-9831d979.js";import"./types-e1c0a5bf.js";import"./Version-9baeb7ac.js";import"./quat-5b263584.js";import"./Texture-bbae5d9d.js";import"./TextureOnly.glsl-18701a3b.js";import"./InterleavedLayout-5e9cf734.js";import"./MixExternalColor.glsl-25f0049c.js";import"./symbolColorUtils-604c5345.js";import"./ObjectAndLayerIdColor.glsl-73c19386.js";import"./OutputDepth.glsl-179f1d8f.js";import"./VisualVariables.glsl-b8290512.js";import"./DiscardOrAdjustAlphaBlend.glsl-5f837994.js";import"./Normals.glsl-90e28525.js";import"./DefaultMaterial.glsl-b4f4cbc5.js";import"./VertexColor.glsl-db21b96c.js";import"./DefaultTechniqueConfiguration-e8962072.js";import"./RealisticTree.glsl-2b30ed32.js";import"./edgeProcessing-3ca548e1.js";import"./deduplicate-b0bc48cc.js";import"./projection-aa2a8986.js";import"./Octree-1a841545.js";import"./HUDMaterial.glsl-4bf3c7df.js";import"./sdfPrimitives-a24e9cb2.js";import"./floatRGBA-fa8308d2.js";import"./dehydratedFeatures-4eeb381a.js";import"./quantizationUtils-33aba427.js";import"./labelFormatUtils-4d730eaa.js";import"./I3SUtil-3ffd3baa.js";import"./I3SBinaryReader-3d2c2faa.js";import"./LineCallout.glsl-a0056465.js";import"./earcut-58237617.js";import"./QueryEngineResult-665bf7fb.js";import"./WhereClause-2b5b05b2.js";import"./utils-30a9a7e0.js";import"./generateRendererUtils-a996108f.js";import"./utils-1f4fcfec.js";import"./json-48e3ea08.js";import"./MeshComponent-f50df6af.js";import"./MarkerSizing.glsl-c6fa192a.js";import"./RibbonLine.glsl-2a3b4d4e.js";import"./LineStipple.glsl-de782d6a.js";import"./callExpressionWithFeature-a7532499.js";import"./LineMarker.glsl-8f444621.js";import"./NativeLine.glsl-cdbbf172.js";import"./Path.glsl-60b36878.js";import"./ColorMaterial.glsl-8310ffb3.js";import"./Pattern.glsl-d3388745.js";import"./LercDecoder-73115fd2.js";import"./config-1337d16e.js";import"./workerHelper-c6d4a8cb.js";import"./Subtype-5b01b21f.js";import"./datetime-4f774298.js";import"./elevationInfoUtils-427916a5.js";import"./ExportImageParameters-f328a234.js";import"./sublayerUtils-ba7f61bc.js";import"./webStyleSymbolUtils-55ed91cd.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./WGLBrushVTLSymbol-dcfd88b4.js";import"./StyleDefinition-7d58136b.js";import"./GeometryUtils-c093d234.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-afbd57f8.js";import"./heatmapTextureUtils-d1d96768.js";import"./popupUtils-e8f3d062.js";class de extends L{constructor(t,i,r,s,o,a,l=null){super(t,i,r,s,o,a),this.bitmap=new j(l,null,null),this.bitmap.coordScale=[o,a],this.bitmap.once("isReady",()=>this.ready())}destroy(){super.destroy(),this.bitmap.destroy(),this.bitmap=null,this.stage=null}set stencilRef(t){this.bitmap.stencilRef=t}get stencilRef(){return this.bitmap.stencilRef}setTransform(t){super.setTransform(t),this.bitmap.transforms.dvs=this.transforms.dvs}_createTransforms(){return{dvs:T(),tileMat3:T()}}onAttach(){this.bitmap.stage=this.stage}onDetach(){this.bitmap.stage=null}}let ye=class extends F{constructor(){super(...arguments),this.isCustomTilingScheme=!1}createTile(t){const i=this._getTileBounds(t),[r,s]=this._tileInfoView.tileInfo.size,o=this._tileInfoView.getTileResolution(t.level);return new de(t,o,i[0],i[3],r,s)}prepareRenderPasses(t){const i=t.registerRenderPass({name:"imagery (tile)",brushes:[H.raster],target:()=>this.children.map(r=>r.bitmap),drawPhase:I.MAP});return[...super.prepareRenderPasses(t),i]}doRender(t){this.visible&&t.drawPhase===I.MAP&&super.doRender(t)}_getTileBounds(t){const i=this._tileInfoView.getTileBounds(D(),t);if(this.isCustomTilingScheme&&t.world){const{tileInfo:r}=this._tileInfoView,s=Q(r.spatialReference);if(s){const{resolution:o}=r.lodAt(t.level),a=s/o%r.size[0],l=a?(r.size[0]-a)*o:0;i[0]-=l*t.world,i[2]-=l*t.world}}return i}};const fe=[0,0];let m=class extends N{constructor(){super(...arguments),this._emptyTilePixelBlock=null,this._tileStrategy=null,this._tileInfoView=null,this._fetchQueue=null,this._blockCacheRegistryUrl=null,this._blockCacheRegistryId=null,this._srcResolutions=null,this.previousLOD=null,this._needBlockCacheUpdate=!1,this._globalSymbolizerParams=null,this._symbolizerParams=null,this._abortController=null,this._isCustomTilingScheme=!1,this._globalUpdateRequested=!1,this.attached=!1,this.container=null,this.layer=null,this.timeExtent=null,this.redrawOrRefetch=q((e,t)=>!this.previousLOD||this.layerView.suspended?Promise.resolve():e?this.updatingHandles.addPromise(this.doRefresh()):this.updatingHandles.addPromise(this._redrawImage(t)))}get useWebGLForProcessing(){return this._get("useWebGLForProcessing")??!0}set useWebGLForProcessing(e){this._set("useWebGLForProcessing",e)}get useProgressiveUpdate(){return this._get("useProgressiveUpdate")==null||this._get("useProgressiveUpdate")}set useProgressiveUpdate(e){if(this._tileStrategy&&this.useProgressiveUpdate!==e){this._tileStrategy.destroy(),this.container.removeAllChildren();const t=this._getCacheSize(e);this._tileStrategy=new k({cachePolicy:"purge",acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),cacheSize:t,tileInfoView:this._tileInfoView}),this._set("useProgressiveUpdate",e),this.layerView.requestUpdate()}}update(e){var o;this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume();const{extent:t,resolution:i,scale:r}=e.state,s=this._tileInfoView.getClosestInfoForScale(r);if(this.layer.raster){if(!this.useProgressiveUpdate||this._needBlockCacheUpdate){const a=this._srcResolutions[s.level],l=t.toJSON?t:X.fromJSON(t);U(this._blockCacheRegistryUrl,this._blockCacheRegistryId,l,i,a,this.layer.raster.ioConfig.sampling)}this._needBlockCacheUpdate=!1,((o=this.previousLOD)==null?void 0:o.level)!==s.level&&(this.previousLOD=s,this._symbolizerParams==null||this.layerView.hasTilingEffects||this._updateSymbolizerParams(),this._tileStrategy.updateCacheSize(0))}}moveEnd(){!this.layerView.hasTilingEffects&&this.useProgressiveUpdate||(this._abortController&&this._abortController.abort(),this._abortController=new AbortController,this._fetchQueue.length===0&&this._redrawImage(this._abortController.signal).then(()=>{this._globalUpdateRequested=!1,this.layerView.requestUpdate()}));const e=this._getCacheSize(this.useProgressiveUpdate);this._tileStrategy.updateCacheSize(e),this.layerView.requestUpdate()}get updating(){var e;return((e=this._fetchQueue)==null?void 0:e.updating)||this._globalUpdateRequested||!(!this.updatingHandles||!this.updatingHandles.updating)}attach(){le("2d").supportsTextureFloat||(this.useWebGLForProcessing=!1),this._initializeTileInfo(),this._tileInfoView=new ae(this.layerView.tileInfo,this.layerView.fullExtent);const e=this._computeFetchConcurrency();this._fetchQueue=new oe({tileInfoView:this._tileInfoView,concurrency:e,process:(i,r)=>this._fetchTile1(i,r)});const t=this._getCacheSize(this.useProgressiveUpdate);this._tileStrategy=new k({cachePolicy:"purge",acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),cacheSize:t,tileInfoView:this._tileInfoView}),this._updateBlockCacheRegistry()}detach(){this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null,z(this._blockCacheRegistryUrl,this._blockCacheRegistryId),this._blockCacheRegistryUrl=this._blockCacheRegistryId=null}acquireTile(e){const t=this.container.createTile(e);return this._enqueueTileFetch(t),this.layerView.requestUpdate(),this._needBlockCacheUpdate=!0,this._globalUpdateRequested=this.layerView.hasTilingEffects||!this.useProgressiveUpdate,t}releaseTile(e){this._fetchQueue.abort(e.key.id),this.container.removeChild(e),e.once("detach",()=>{e.destroy(),this.layerView.requestUpdate()}),this.layerView.requestUpdate()}createEmptyTilePixelBlock(e=null){const t=e==null||e.join(",")===this._tileInfoView.tileInfo.size.join(",");if(t&&u(this._emptyTilePixelBlock))return this._emptyTilePixelBlock;e=e||this._tileInfoView.tileInfo.size;const[i,r]=e,s=new K({width:i,height:r,pixels:[new Uint8Array(i*r)],mask:new Uint8Array(i*r),pixelType:"u8"});return t&&(this._emptyTilePixelBlock=s),s}_fetchTile1(e,t){const i=u(t)&&t.signal,r=this.canUseWebGLForProcessing(),{layerView:s}=this,o=!s.tileInfo.isWrappable&&u(re(s.view.spatialReference)),a={allowPartialFill:!0,datumTransformation:s.datumTransformation,interpolation:r?"nearest":this.layer.interpolation,registryId:this._blockCacheRegistryId,requestRawData:r,signal:$(i),srcResolution:this._srcResolutions[e.level],timeExtent:s.timeExtent,tileInfo:s.tileInfo,disableWrapAround:o};return this.fetchTile(e,a)}_getCacheSize(e){return e?40:0}_initializeTileInfo(){const e=this.layerView.view.spatialReference,t=new Y({x:this.layerView.fullExtent.xmin,y:this.layerView.fullExtent.ymax,spatialReference:e}),{scales:i,srcResolutions:r,isCustomTilingScheme:s}=se(this.layer.rasterInfo,e),o=ee.create({spatialReference:e,size:512,scales:i});(o.origin.x===0||o.origin.x>t.x)&&(o.origin=t),this._isCustomTilingScheme=s,this.layerView.set("tileInfo",o),this._srcResolutions=r??[]}_computeFetchConcurrency(){const{blockBoundary:e}=this.layer.rasterInfo.storageInfo,t=e[e.length-1];return(t.maxCol-t.minCol+1)*(t.maxRow-t.minRow+1)>64?2:10}async _enqueueTileFetch(e,t){this.updatingHandles.addPromise(this._enqueueTileFetch1(e,t))}async _enqueueTileFetch1(e,t){if(!this._fetchQueue.has(e.key.id)){try{const i=await this._fetchQueue.push(e.key),{bandIds:r}=this.layer;let s=!this.useProgressiveUpdate||this.layerView.hasTilingEffects&&!this._globalSymbolizerParams;if(this._globalUpdateRequested&&!this.layerView.moving&&this._fetchQueue.length===0){s=!1;try{await this._redrawImage(this._abortController&&this._abortController.signal)}catch(l){v(l)&&_.getLogger(this.declaredClass).error(l)}this._globalUpdateRequested=!1}!this.canUseWebGLForProcessing()&&this.type!=="rasterVF"||this.layerView.hasTilingEffects||this._symbolizerParams!=null||this._updateSymbolizerParams();const o=this._tileInfoView.getTileCoords(fe,e.key),a=this._tileInfoView.getTileResolution(e.key);await this.updateTileSource(e,{source:i,symbolizerParams:this._symbolizerParams,globalSymbolizerParams:this._globalSymbolizerParams,suspended:s,bandIds:r,coords:o,resolution:a}),e.once("attach",()=>this.layerView.requestUpdate()),this.container.addChild(e)}catch(i){v(i)||_.getLogger(this.declaredClass).error(i)}this.layerView.requestUpdate()}}async _redrawImage(e){if(this.container.children.length===0)return;await this.layer.updateRenderer(),this.layerView.hasTilingEffects?await this._updateGlobalSymbolizerParams(e):(this._updateSymbolizerParams(),this._globalSymbolizerParams=null);const t=this.container.children.map(async i=>this.updateTileSymbolizerParameters(i,{local:this._symbolizerParams,global:this._globalSymbolizerParams}));await V(t),this.container.requestRender()}async _updateGlobalSymbolizerParams(e){const t={srcResolution:this._srcResolutions[this.previousLOD.level],registryId:this._blockCacheRegistryId,signal:e},i=await this.layer.fetchPixels(this.layerView.view.extent,this.layerView.view.width,this.layerView.view.height,t);if(!i||!i.pixelBlock)return;const r=this.layer.symbolizer.generateWebGLParameters({pixelBlock:Z(i.pixelBlock,this.layer.bandIds),isGCS:this.layerView.view.spatialReference.isGeographic,resolution:{x:this.previousLOD.resolution,y:this.previousLOD.resolution},bandIds:this.layer.bandIds});!this.canUseWebGLForProcessing()&&r&&r.type==="stretch"&&this.layer.renderer&&this.layer.renderer.type==="raster-stretch"&&(r.factor=r.factor.map(s=>255*s),r.outMin=Math.round(255*r.outMin),r.outMax=Math.round(255*r.outMax)),this._globalSymbolizerParams=r}_updateSymbolizerParams(){this._symbolizerParams=this.layer.symbolizer.generateWebGLParameters({pixelBlock:null,isGCS:this.layerView.view.spatialReference.isGeographic,resolution:{x:this.previousLOD.resolution,y:this.previousLOD.resolution},bandIds:this.layer.bandIds})}_updateBlockCacheRegistry(e=!1){const{url:t,rasterInfo:i,raster:r}=this.layer,{multidimensionalDefinition:s}=this.layer.normalizeRasterFetchOptions({multidimensionalDefinition:this.layer.multidimensionalDefinition,timeExtent:this.layerView.timeExtent}),o=i!=null&&i.multidimensionalInfo?r.getSliceIndex(s):null,a=ie(t,o);if(a!==this._blockCacheRegistryUrl){if(this._blockCacheRegistryUrl!=null&&z(this._blockCacheRegistryUrl,this._blockCacheRegistryId),this._blockCacheRegistryId=te(a,this.layer.raster.rasterInfo),e){const l=this._tileInfoView.getClosestInfoForScale(this.layerView.view.scale),c=this._srcResolutions[l.level];U(a,this._blockCacheRegistryId,this.layerView.view.extent,this.layerView.view.resolution,c,this.layer.raster.ioConfig.sampling)}this._blockCacheRegistryUrl=a}}async doRefresh(){if(!this.attached)return;await this.layer.updateRenderer(),this.layerView.hasTilingEffects||this._updateSymbolizerParams(),this._updateBlockCacheRegistry(!0),this._fetchQueue.reset();const e=[];this._globalUpdateRequested=this.layerView.hasTilingEffects||!this.useProgressiveUpdate,this._tileStrategy.tiles.forEach(t=>e.push(this._enqueueTileFetch(t))),await V(e)}};n([p()],m.prototype,"_fetchQueue",void 0),n([p()],m.prototype,"_globalUpdateRequested",void 0),n([p()],m.prototype,"attached",void 0),n([p()],m.prototype,"container",void 0),n([p()],m.prototype,"layer",void 0),n([p()],m.prototype,"layerView",void 0),n([p()],m.prototype,"type",void 0),n([p()],m.prototype,"useWebGLForProcessing",null),n([p()],m.prototype,"useProgressiveUpdate",null),n([p()],m.prototype,"timeExtent",void 0),n([p()],m.prototype,"updating",null),m=n([R("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")],m);let g=class extends m{constructor(){super(...arguments),this.container=null,this.layer=null,this.type="raster"}attach(){super.attach(),this.container=new ye(this._tileInfoView),this.container.isCustomTilingScheme=this._isCustomTilingScheme}detach(){super.detach(),this.container.removeAllChildren(),this.container=null}canUseWebGLForProcessing(){return this.useWebGLForProcessing&&this.layer.symbolizer.canRenderInWebGL&&!(this.layer.interpolation==="majority"&&G(this.layer))}fetchTile(e,t){return this.layer.fetchTile(e.level,e.row,e.col,t)}async updateTileSource(e,t){const{bandIds:i}=this.layer,r=this._getLayerInterpolation(),s=this.canUseWebGLForProcessing(),{source:o,globalSymbolizerParams:a,suspended:l,coords:c,resolution:d}=t,P=this.layerView.hasTilingEffects?a:t.symbolizerParams,{bitmap:h}=e;if([h.x,h.y]=c,h.resolution=d,o&&u(o)&&u(o.pixelBlock)){const y={extent:o.extent,pixelBlock:o.pixelBlock};if(h.rawPixelData=y,s)h.source=o.pixelBlock,h.isRendereredSource=!1;else{const S=await this.layer.applyRenderer(y,(a==null?void 0:a.type)==="stretch"?a:null);h.source=S,h.isRendereredSource=!0}h.symbolizerParameters=s?P:null,s?h.transformGrid||(h.transformGrid=o.transformGrid):h.transformGrid=null}else{const y=this.createEmptyTilePixelBlock();h.source=y,h.symbolizerParameters=s?P:null,h.transformGrid=null}h.bandIds=s?i:null,h.width=this._tileInfoView.tileInfo.size[0],h.height=this._tileInfoView.tileInfo.size[1],h.interpolation=r,h.suspended=l,h.invalidateTexture()}async updateTileSymbolizerParameters(e,t){const{local:i,global:r}=t,{bandIds:s}=this.layer,o=this._getLayerInterpolation(),a=this.canUseWebGLForProcessing(),{bitmap:l}=e,{rawPixelData:c}=l;!a&&u(c)?(l.source=await this.layer.applyRenderer(c,(r==null?void 0:r.type)==="stretch"?r:null),l.isRendereredSource=!0):(l.isRendereredSource&&u(c)&&(l.source=c.pixelBlock),l.isRendereredSource=!1),l.symbolizerParameters=a?this.layerView.hasTilingEffects?r:i:null,l.bandIds=a?s:null,l.interpolation=o,l.suspended=!1}_getLayerInterpolation(){const e=this.layer.renderer.type;if(e==="raster-colormap"||e==="unique-value"||e==="class-breaks")return"nearest";const{interpolation:t}=this.layer,{renderer:i}=this.layer;return i.type==="raster-stretch"&&i.colorRamp!=null?t==="bilinear"||t==="cubic"?"bilinear":"nearest":t}};n([p()],g.prototype,"container",void 0),n([p()],g.prototype,"layer",void 0),n([p()],g.prototype,"type",void 0),g=n([R("esri.views.2d.layers.imagery.ImageryTileView2D")],g);const ge=g;class be extends L{constructor(t,i,r,s,o,a,l=null){super(t,i,r,s,o,a),this.tileData=new O(l),this.tileData.coordScale=[o,a],this.tileData.once("isReady",()=>this.ready())}destroy(){super.destroy(),this.tileData.destroy(),this.tileData=null,this.stage=null}set stencilRef(t){this.tileData.stencilRef=t}get stencilRef(){return this.tileData.stencilRef}_createTransforms(){return{dvs:T(),tileMat3:T()}}setTransform(t){super.setTransform(t);const i=this.resolution/(t.resolution*t.pixelRatio),r=this.transforms.tileMat3,[s,o]=this.tileData.offset,a=[this.x+s*this.resolution,this.y-o*this.resolution],[l,c]=t.toScreenNoRotation([0,0],a),{symbolTileSize:d}=this.tileData.symbolizerParameters,P=Math.round((this.width-this.tileData.offset[0])/d)*d,h=Math.round((this.height-this.tileData.offset[1])/d)*d,y=P/this.rangeX*i,S=h/this.rangeY*i;he(r,y,0,0,0,S,0,l,c,1),pe(this.transforms.dvs,t.displayViewMat3,r),this.tileData.transforms.dvs=this.transforms.dvs}onAttach(){this.tileData.stage=this.stage}onDetach(){this.tileData.stage=null}}class we extends F{constructor(){super(...arguments),this.isCustomTilingScheme=!1,this.symbolTypes=["triangle"]}createTile(t){const i=this._tileInfoView.getTileBounds(D(),t),[r,s]=this._tileInfoView.tileInfo.size,o=this._tileInfoView.getTileResolution(t.level);return new be(t,o,i[0],i[3],r,s)}prepareRenderPasses(t){const i=t.registerRenderPass({name:"imagery (vf tile)",brushes:[J],target:()=>this.children.map(r=>r.tileData),drawPhase:I.MAP});return[...super.prepareRenderPasses(t),i]}doRender(t){this.visible&&t.drawPhase===I.MAP&&this.symbolTypes.forEach(i=>{t.renderPass=i,super.doRender(t)})}}let b=class extends m{constructor(){super(...arguments),this._handle=null,this.container=null,this.layer=null,this.type="rasterVF"}canUseWebGLForProcessing(){return!1}async fetchTile(e,t){t={...t,interpolation:"nearest",requestProjectedLocalDirections:!0};const i=await this.layer.fetchTile(e.level,e.row,e.col,t);return this.layer.rasterInfo.dataType==="vector-magdir"&&(i!=null&&i.pixelBlock)&&(i.pixelBlock=await this.layer.convertVectorFieldData(i.pixelBlock,t)),i}updateTileSource(e,t){const i=t.symbolizerParams,{tileData:r}=e;r.key=e.key,r.width=this._tileInfoView.tileInfo.size[0],r.height=this._tileInfoView.tileInfo.size[1];const{symbolTileSize:s}=i,{source:o}=t;if(r.offset=this._getTileSymbolOffset(r.key,s),u(o)&&u(o.pixelBlock)){const a={extent:o.extent,pixelBlock:o.pixelBlock};r.rawPixelData=a,r.symbolizerParameters=i,r.source=this._sampleVectorFieldData(o.pixelBlock,i,r.offset)}else{const a=[Math.round((this._tileInfoView.tileInfo[0]-r.offset[0])/s),Math.round((this._tileInfoView.tileInfo[1]-r.offset[1])/s)],l=this.createEmptyTilePixelBlock(a);r.source=l,r.symbolizerParameters=i}return r.invalidateVAO(),Promise.resolve(null)}updateTileSymbolizerParameters(e,t){var a;const i=t.local,{symbolTileSize:r}=i,{tileData:s}=e;s.offset=this._getTileSymbolOffset(s.key,r);const o=s.symbolizerParameters.symbolTileSize;return s.symbolizerParameters=i,u((a=s.rawPixelData)==null?void 0:a.pixelBlock)&&o!==r&&(s.source=this._sampleVectorFieldData(s.rawPixelData.pixelBlock,s.symbolizerParameters,s.offset)),Promise.resolve(null)}attach(){super.attach(),this.container=new we(this._tileInfoView),this.container.isCustomTilingScheme=this._isCustomTilingScheme,this._updateSymbolType(this.layer.renderer),this._handle=f(()=>this.layer.renderer,e=>this._updateSymbolType(e))}detach(){super.detach(),this.container.removeAllChildren(),this._handle.remove(),this._handle=null}_getTileSymbolOffset(e,t){const i=e.col*this._tileInfoView.tileInfo.size[0]%t,r=e.row*this._tileInfoView.tileInfo.size[1]%t;return[i>t/2?t-i:-i,r>t/2?t-r:-r]}_sampleVectorFieldData(e,t,i){const{symbolTileSize:r}=t;return ne(e,"vector-uv",r,i)}_updateSymbolType(e){e.type==="vector-field"&&(this.container.symbolTypes=e.style==="wind-barb"?["scalar","triangle"]:e.style==="simple-scalar"?["scalar"]:["triangle"])}};n([p()],b.prototype,"container",void 0),n([p()],b.prototype,"layer",void 0),n([p()],b.prototype,"type",void 0),b=n([R("esri.views.2d.layers.imagery.VectorFieldTileView2D")],b);const _e=b;let w=class extends me(ue(A(ce))){constructor(){super(...arguments),this._useWebGLForProcessing=!0,this._useProgressiveUpdate=!0,this.subview=null}get useWebGLForProcessing(){return this._useWebGLForProcessing}set useWebGLForProcessing(e){this._useWebGLForProcessing=e,this.subview&&"useWebGLForProcessing"in this.subview&&(this.subview.useWebGLForProcessing=e)}get useProgressiveUpdate(){return this._useWebGLForProcessing}set useProgressiveUpdate(e){this._useProgressiveUpdate=e,this.subview&&"useProgressiveUpdate"in this.subview&&(this.subview.useProgressiveUpdate=e)}update(e){this.subview.update(e),this.notifyChange("updating")}isUpdating(){return!this.subview||this.subview.updating}attach(){this.layer.increaseRasterJobHandlerUsage(),this._updateSubview(),this.handles.add([f(()=>{const{layer:e}=this;return{bandIds:e.bandIds,renderer:e.renderer,interpolation:e.interpolation,multidimensionalDefinition:e.multidimensionalDefinition,rasterFunction:e.type==="imagery-tile"?e.rasterFunction:null}},(e,t)=>{var l,c;const i=e.interpolation!==t.interpolation&&(e.interpolation==="majority"||t.interpolation==="majority")&&G(this.layer),r=e.renderer!==t.renderer&&((l=t.renderer)==null?void 0:l.type)!==((c=e.renderer)==null?void 0:c.type);r&&this._updateSubview();const s=e.multidimensionalDefinition!==t.multidimensionalDefinition,o=e.rasterFunction!==t.rasterFunction,a=s||i||r||o;this.subview.redrawOrRefetch(a).catch(d=>{v(d)||_.getLogger(this.declaredClass).error(d)}),this.notifyChange("updating")}),f(()=>this.layer.blendMode??"normal",e=>{this.subview.container.blendMode=e},x),f(()=>this.layer.effect??null,e=>{this.subview.container.effect=e},x),f(()=>this.layer.multidimensionalSubset??null,(e,t)=>{const{multidimensionalDefinition:i}=this.layer;u(i)&&C(i,e)!==C(i,t)&&(this.subview.redrawOrRefetch(!0).catch(r=>{v(r)||_.getLogger(this.declaredClass).error(r)}),this.notifyChange("updating"))},E),f(()=>this.timeExtent,()=>{this.subview.timeExtent=this.timeExtent,this.subview.redrawOrRefetch(!0).catch(e=>{v(e)||_.getLogger(this.declaredClass).error(e)})},W)],"attach")}detach(){var e;this.handles.remove("attach"),this.layer.decreaseRasterJobHandlerUsage(),this._detachSubview(this.subview),(e=this.subview)==null||e.destroy(),this.subview=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.subview.moveEnd()}async hitTest(e,t){return[{type:"graphic",layer:this.layer,mapPoint:e,graphic:new B({attributes:{},geometry:e.clone()})}]}doRefresh(){var e;return(e=this.subview)==null?void 0:e.doRefresh()}_updateSubview(){var r;const e=this.layer.renderer.type==="vector-field"?"rasterVF":this.layer.renderer.type==="flow"?"flow":"raster";if(this.subview){if(this.subview.type===e)return void this._attachSubview(this.subview);this._detachSubview(this.subview),(r=this.subview)==null||r.destroy(),this.subview=null}const{layer:t}=this;let i;i=e==="rasterVF"?new _e({layer:t,layerView:this}):e==="flow"?new M({layer:t,layerView:this}):new ge({layer:t,layerView:this}),"useWebGLForProcessing"in i&&(i.useWebGLForProcessing=this._useWebGLForProcessing),"useProgressiveUpdate"in i&&(i.useProgressiveUpdate=this._useProgressiveUpdate),"previousLOD"in i&&(i.previousLOD=this.subview&&"previousLOD"in this.subview&&this.subview.previousLOD),this._attachSubview(i),this.subview=i,this.requestUpdate()}_attachSubview(e){e&&!e.attached&&(e.attach(),e.attached=!0,this.container.addChildAt(e.container,0),e.container.blendMode=this.layer.blendMode,e.container.effect=this.layer.effect)}_detachSubview(e){e!=null&&e.attached&&(this.container.removeChild(e.container),e.detach(),e.attached=!1)}};n([p()],w.prototype,"subview",void 0),n([p()],w.prototype,"useWebGLForProcessing",null),n([p()],w.prototype,"useProgressiveUpdate",null),w=n([R("esri.views.2d.layers.ImageryTileLayerView2D")],w);const ea=w;export{ea as default};
