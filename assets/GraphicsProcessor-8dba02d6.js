import{e as n,y as a,n as f,c as b}from"./cast-7928d7aa.js";import{g as c}from"./Graphic-b46e2684.js";import{j as C}from"./Collection-78126e82.js";import{d as w}from"./HandleOwner-e1406413.js";import{r as l,s as u,t as d}from"./typedArrayUtil-a8b5b3e9.js";import{j as v}from"./promiseUtils-6684e352.js";import{l as y,U as S,w as V}from"./reactiveUtils-f41a4e00.js";import"./ensureType-cf29afa9.js";import{m as E}from"./diffUtils-1ac65748.js";import{b as x}from"./Layer-f0696768.js";import{g as G,h as O,i as P,j as _,z as j,k as A}from"./index-455b69b8.js";import{x as $}from"./Query-ff8c2cfb.js";import{F as I,l as R,S as z,s as H,_ as D}from"./Graphics3DObjectStates-2cd67a8a.js";import{i as U,u as h}from"./basicInterfaces-19ed850e.js";let s=class extends w{constructor(i){super(i),this.type="graphics-3d",this.graphicsCore=null,this.drapeSourceType=G.Features,this.scaleVisibilityEnabled=!1,this.frustumVisibilityEnabled=!1,this._suspendResumeExtent=null}initialize(){const{layer:i}=this,t="effectiveScaleRange"in i?i:null,o=this.scaleVisibilityEnabled&&l(t),r=new I({owner:this,layer:this.owner.layer,preferredUpdatePolicy:U.SYNC,graphicSymbolSupported:!0,componentFactories:{elevationAlignment:(e,p)=>new R({graphicsCoreOwner:this,graphicsCore:e,queryGraphicUIDsInExtent:p,elevationProvider:this.view.elevationProvider}),scaleVisibility:o?(e,p)=>new z({graphicsCoreOwner:this,layer:t,queryGraphicUIDsInExtent:p,graphicsCore:e,basemapTerrain:this.owner.view.basemapTerrain}):null,objectStates:e=>new H(e)}});if(this._set("graphicsCore",r),this.frustumVisibilityEnabled&&this._set("frustumVisibility",new D({graphicsCoreOwner:this})),"fullOpacity"in this.owner){const e=this.owner;this.updatingHandles.add(()=>e.fullOpacity,()=>this.graphicsCore.opacityChange())}if("elevationInfo"in i){const e=i;this.updatingHandles.add(()=>e.elevationInfo,(p,m)=>{E(p,m)&&this.updatingHandles.addPromise(this.graphicsCore.elevationInfoChange())})}this._set("initializePromise",this._initializeAsync()),this.updatingHandles.addPromise(this.initializePromise)}async _initializeAsync(){try{await this.graphicsCore.initializePromise}catch(i){if(v(i))return;throw i}this.destroyed||(this.handles.add(y(()=>this.view.clippingArea,()=>this._updateClippingExtent(),S)),this._updateClippingExtent(),this._setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics())}destroy(){this.handles.removeAll(),this.updatingHandles.removeAll(),this._set("frustumVisibility",u(this.frustumVisibility)),this._set("graphicsCore",u(this.graphicsCore))}get layer(){return this.owner.layer}get view(){return this.owner.view}get scaleVisibility(){var i;return(i=this.graphicsCore)==null?void 0:i.scaleVisibility}get elevationAlignment(){var i;return(i=this.graphicsCore)==null?void 0:i.elevationAlignment}get objectStates(){var i;return(i=this.graphicsCore)==null?void 0:i.objectStates}get scaleVisibilitySuspended(){return!(!l(this.scaleVisibility)||!this.scaleVisibility.suspended)}get frustumVisibilitySuspended(){return l(this.frustumVisibility)&&this.frustumVisibility.suspended}get suspended(){return this.owner.suspended??!1}get updating(){var i;return!!((i=this.graphicsCore)!=null&&i.updating||l(this.scaleVisibility)&&this.scaleVisibility.updating||l(this.frustumVisibility)&&this.frustumVisibility.updating||this.updatingHandles.updating)}get graphics3DGraphics(){var i;return(i=this.graphicsCore)==null?void 0:i.graphics3DGraphics}get graphics3DGraphicsByObjectID(){var i;return(i=this.graphicsCore)==null?void 0:i.graphics3DGraphicsByObjectID}get loadedGraphics(){return this.owner.loadedGraphics}get fullOpacity(){return this.owner.fullOpacity??1}get slicePlaneEnabled(){return this.owner.slicePlaneEnabled}get updatePolicy(){return this.owner.updatePolicy}notifyGraphicGeometryChanged(i){this.graphicsCore.notifyGraphicGeometryChanged(i)}notifyGraphicVisibilityChanged(i){this.graphicsCore.notifyGraphicVisibilityChanged(i)}getRenderingInfo(i,t,o){const r=O(i,{renderer:t,arcade:o});if(l(r)&&r.color){const e=r.color;e[0]=e[0]/255,e[1]=e[1]/255,e[2]=e[2]/255}return r}getRenderingInfoAsync(i,t,o,r){return P(i,{renderer:t,arcade:o,...r})}getHit(i){if(this.owner.loadedGraphics){const t=this.owner.loadedGraphics.find(o=>o.uid===i);if(t){const o=this.layer instanceof x?this.layer:null,r=_(t,o);return{type:"graphic",graphic:r,layer:r.layer}}}return null}whenGraphicBounds(i,t){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(i,t):Promise.reject()}computeAttachmentOrigin(i,t){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(i,t):null}getSymbolLayerSize(i,t){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(i,t):null}maskOccludee(i){const{set:t,handle:o}=this.objectStates.acquireSet(h.MaskOccludee,null);return this.objectStates.setUid(t,i.uid),o}highlight(i){if(i instanceof $)return g;if(typeof i=="number")return this.highlight([i]);if(i instanceof c)return this.highlight([i]);if(i instanceof C&&(i=i.toArray()),Array.isArray(i)&&i.length>0){if(i[0]instanceof c){const t=i.map(e=>e.uid),{set:o,handle:r}=this.objectStates.acquireSet(h.Highlight,null);return this.objectStates.setUids(o,t),r}if(typeof i[0]=="number"){const t=i,{set:o,handle:r}=this.objectStates.acquireSet(h.Highlight,null);return this.objectStates.setObjectIds(o,t),r}}return g}_setupSuspendResumeExtent(){const{scaleVisibility:i,frustumVisibility:t}=this;if(d(i)&&d(t))return;const o=({computedExtent:r,extentPadding:e})=>{this._suspendResumeExtent=j(r,this._suspendResumeExtent,A,e),l(i)&&i.setExtent(this._suspendResumeExtent),l(t)&&t.setExtent(this._suspendResumeExtent)};this.handles.add(y(()=>{var r,e;return{computedExtent:(r=this.graphicsCore)==null?void 0:r.computedExtent,extentPadding:(e=this.graphicsCore)==null?void 0:e.extentPadding}},r=>o(r),V))}_updateClippingExtent(){const i=this.view.clippingArea;this.graphicsCore.setClippingExtent(i,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics()}};n([a()],s.prototype,"type",void 0),n([a({constructOnly:!0})],s.prototype,"owner",void 0),n([a()],s.prototype,"layer",null),n([a()],s.prototype,"view",null),n([a({constructOnly:!0})],s.prototype,"graphicsCore",void 0),n([a()],s.prototype,"scaleVisibility",null),n([a({constructOnly:!0})],s.prototype,"frustumVisibility",void 0),n([a()],s.prototype,"elevationAlignment",null),n([a()],s.prototype,"objectStates",null),n([a()],s.prototype,"scaleVisibilitySuspended",null),n([a({readOnly:!0})],s.prototype,"frustumVisibilitySuspended",null),n([a()],s.prototype,"suspended",null),n([a({readOnly:!0})],s.prototype,"updating",null),n([a()],s.prototype,"loadedGraphics",null),n([a()],s.prototype,"fullOpacity",null),n([a()],s.prototype,"slicePlaneEnabled",null),n([a()],s.prototype,"drapeSourceType",void 0),n([a()],s.prototype,"updatePolicy",null),n([a({constructOnly:!0})],s.prototype,"scaleVisibilityEnabled",void 0),n([a({constructOnly:!0})],s.prototype,"frustumVisibilityEnabled",void 0),n([a()],s.prototype,"initializePromise",void 0),s=n([f("esri.views.3d.layers.graphics.GraphicsProcessor")],s);const g=b();export{s as A};
