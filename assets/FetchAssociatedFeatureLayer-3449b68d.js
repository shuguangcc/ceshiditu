import{U as h,s as p}from"./request-d3e98716.js";import{t as l,r as f}from"./typedArrayUtil-a8b5b3e9.js";import{w as u}from"./promiseUtils-6684e352.js";import _ from"./FeatureLayer-a9f3e6ec.js";import{j as g}from"./Portal-8b65c9c4.js";import w from"./PortalItem-aa42c739.js";class A{constructor(t,r,a,e){var i;this._parsedUrl=t,this._portalItem=r,this._apiKey=a,this.signal=e,this._rootDocument=null;const s=(i=this._parsedUrl)==null?void 0:i.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);s&&(this._urlParts={root:s[1],layerId:parseInt(s[2],10)})}async fetch(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();if(l(t))return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t);return l(r)?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();return l(t)?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(f(this._rootDocument))return this._rootDocument;if(l(this._urlParts))return this._rootDocument={},{};const t={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},r=`${this._urlParts.root}/SceneServer`;try{const a=await h(r,t);this._rootDocument=a.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){var e,s;const t=(e=this._parsedUrl)==null?void 0:e.path,r=t?(s=p)==null?void 0:s.findServerInfo(t):null;if(r!=null&&r.owningSystemUrl)return r.owningSystemUrl;const a=t?t.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const i=(await h(a,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(i)return i}catch(i){u(i)}return null}async _findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(r=>r.type==="Feature Service")||null}catch(r){return u(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new _({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){var r;const t=await this._findMatchingAssociatedSublayerUrl(`${(r=this._urlParts)==null?void 0:r.root}/FeatureServer`);return new _({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){var y;const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),a={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},e=(y=this._urlParts)==null?void 0:y.layerId,s=this._fetchRootDocument(),i=h(r,a),[m,d]=await Promise.all([i,s]),c=d&&d.layers,n=m.data&&m.data.layers;if(!Array.isArray(n))throw new Error("expected layers array");if(Array.isArray(c)){for(let o=0;o<Math.min(c.length,n.length);o++)if(c[o].id===e)return`${r}/${n[o].id}`}else if(e!=null&&e<n.length)return`${r}/${n[e].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r=new w({id:t,apiKey:this._apiKey}),a=await this._fetchServiceOwningPortalUrl();f(a)&&(r.portal=new g({url:a}));try{return r.load({signal:this.signal})}catch(e){return u(e),null}}}export{A as l};
