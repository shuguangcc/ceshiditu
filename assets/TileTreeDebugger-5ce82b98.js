import{e as a,m as M,y as p,n as P}from"./cast-7928d7aa.js";import{l as j}from"./Color-a42a8267.js";import{g as $}from"./Graphic-b46e2684.js";import{h as S}from"./mathUtils-2519596a.js";import{r as c,t as x}from"./typedArrayUtil-a8b5b3e9.js";import"./ensureType-cf29afa9.js";import{S as O,h as A,b as L,o as k}from"./symbols-fa594797.js";const T=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let i=class extends M{constructor(s){super(s),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=T.map(s=>new O({color:[s[0],s[1],s[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(s){this._enabled!==s&&(this._enabled=s,this.update())}update(){if(!this._enabled)return void this.clear();const s=e=>{if(c(e.label))return e.label;let r=e.lij.toString();return c(e.loadPriority)&&(r+=` (${e.loadPriority})`),r},n=this.getTiles(),h=new Array,g=new Set((this._labels.size,this._labels.keys()));n.forEach((e,r)=>{const t=e.lij.toString();g.delete(t);const z=e.lij[0],m=e.geometry;if(this.enablePolygons&&!this._polygons.has(t)){const o=new $({geometry:m,symbol:this._symbols[z%this._symbols.length]});this._polygons.set(t,o),h.push(o)}if(this.enableLabels){const o=s(e),d=r/(n.length-1),b=S(0,200,d),_=S(20,6,d)/.75,u=c(e.loadPriority)&&e.loadPriority>=n.length,w=new j([b,u?0:b,u?0:b]),f=this.view.type==="3d"?()=>new A({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new L({text:o,halo:{color:"white",size:1/.75},material:{color:w},size:_})]}):()=>new k({text:o,haloColor:"white",haloSize:1/.75,color:w,size:_});if(this._labels.has(t)){const l=this._labels.get(t),v=f();(x(l.symbol)||JSON.stringify(v)!==JSON.stringify(l.symbol))&&(l.symbol=v)}else{const l=new $({geometry:m.extent.center,symbol:f()});this._labels.set(t,l),h.push(l)}}});const y=new Array;g.forEach(e=>{this._polygons.has(e)&&(y.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(y.push(this._labels.get(e)),this._labels.delete(e))}),this.view.graphics.removeMany(y),this.view.graphics.addMany(h)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};a([p({constructOnly:!0})],i.prototype,"view",void 0),a([p({readOnly:!0})],i.prototype,"updating",void 0),a([p()],i.prototype,"enabled",null),i=a([P("esri.views.support.TileTreeDebugger")],i);export{i as b};
