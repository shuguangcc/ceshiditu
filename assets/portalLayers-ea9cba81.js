import{a as N}from"./Error-653283ae.js";import{a as S}from"./lazyLayerLoader-c3848c13.js";import f from"./PortalItem-aa42c739.js";import{n as s,w as m,b as h,T as I,g}from"./layersLoader-6e370ed5.js";import{s as c}from"./portalItemUtils-e098e7d9.js";import"./string-cdf077e6.js";import"./typedArrayUtil-a8b5b3e9.js";import"./preload-helper-41c905a7.js";import"./cast-7928d7aa.js";import"./ensureType-cf29afa9.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-6684e352.js";import"./assets-0b172f07.js";import"./request-d3e98716.js";import"./Loadable-48bc1293.js";import"./Promise-dfdee8ba.js";import"./Extent-69509002.js";import"./Ellipsoid-89682c5e.js";import"./Portal-8b65c9c4.js";import"./locale-30120714.js";import"./PortalGroup-bfe93c76.js";import"./jsonMap-c1f958cf.js";import"./PortalUser-4c8e1adc.js";import"./Layer-f0696768.js";import"./geometry-5a216427.js";import"./Polyline-bf268e7b.js";import"./typeUtils-eb9416d0.js";import"./Evented-515b9d9c.js";import"./Identifiable-aa6d459d.js";import"./arcgisLayerUrl-0b2b7691.js";import"./persistableUrlUtils-a16d0f55.js";import"./jsonContext-c2303d72.js";import"./styleUtils-da81b13f.js";import"./asyncUtils-62e8a185.js";import"./projection-d7b57a6c.js";import"./mathUtils-2519596a.js";import"./vec3-a020a6f6.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./vec4-790471c0.js";import"./unitUtils-47abac71.js";import"./SimpleObservable-7dcdef1d.js";import"./mat4-44a0988f.js";import"./aaBoundingRect-4a760199.js";import"./zscale-1e1fc911.js";function je(e){return!e.portalItem||e.portalItem instanceof f||(e={...e,portalItem:new f(e.portalItem)}),w(e.portalItem).then(r=>{const t={portalItem:e.portalItem,...r.properties};return new r.constructor(t)})}function w(e){return e.load().then(T).then(M)}function T(e){switch(e.type){case"Map Service":return v(e);case"Feature Service":return C(e);case"Feature Collection":return F(e);case"Scene Service":return G(e);case"Image Service":return P(e);case"Stream Service":return b();case"Vector Tile Service":return $();case"GeoJson":return j();case"CSV":return D();case"KML":return K();case"WFS":return O();case"WMTS":return W();case"WMS":return V();case"Feed":return k();default:return Promise.reject(new N("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function M(e){return(0,S[e.className])().then(r=>({constructor:r,properties:e.properties}))}function v(e){return A(e).then(r=>r?{className:"TileLayer"}:{className:"MapImageLayer"})}function C(e){return c(e,"Oriented Imagery Layer")?x(e):L(e).then(r=>{if(typeof r=="object"){const t={};return r.id!=null&&(t.layerId=r.id),{className:r.className||"FeatureLayer",properties:t}}return{className:"GroupLayer"}})}function G(e){return L(e).then(r=>{if(typeof r=="object"){const t={};let a;if(r.id!=null?(t.layerId=r.id,a=`${e.url}/layers/${r.id}`):a=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const n={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const o of Object.keys(n))if(e.typeKeywords.includes(o))return{className:n[o]}}return s(a).then(n=>{let o="SceneLayer";const i={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return n&&n.layerType&&i[n.layerType]&&(o=i[n.layerType]),{className:o,properties:t}})}return r===!1?s(e.url).then(t=>(t==null?void 0:t.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}):{className:"GroupLayer"}})}async function F(e){await e.load();const r=c(e,"Map Notes"),t=c(e,"Markup");if(r||t)return{className:"MapNotesLayer"};if(c(e,"Route Layer"))return{className:"RouteLayer"};const a=await e.fetchData();return m(a)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function P(e){var i,l,p,y;await e.load();const r=((i=e.typeKeywords)==null?void 0:i.map(d=>d.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const t=(l=await e.fetchData())==null?void 0:l.layerType;if(t==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(t==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const a=await s(e.url),n=(p=a.cacheType)==null?void 0:p.toLowerCase(),o=(y=a.capabilities)==null?void 0:y.toLowerCase().includes("tilesonly");return n==="map"||o?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function b(){return{className:"StreamLayer"}}function $(){return{className:"VectorTileLayer"}}function j(){return{className:"GeoJSONLayer"}}function D(){return{className:"CSVLayer"}}function K(){return{className:"KMLLayer"}}function O(){return{className:"WFSLayer"}}function V(){return{className:"WMSLayer"}}function W(){return{className:"WMTSLayer"}}function k(){return{className:"StreamLayer"}}function x(e){return e.load().then(()=>e.fetchData()).then(r=>r.coverage?{className:"GroupLayer"}:{className:"OrientedImageryLayer",properties:r})}function A(e){return s(e.url).then(r=>r.tileInfo)}function L(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then(()=>e.fetchData()).then(async r=>{if(e.type==="Feature Service"){const t=u(await h(r,e.url));if(typeof t=="object"){const a=I(r);t.className=a.includes(t.id)?"SubtypeGroupLayer":"FeatureLayer"}return t}return m(r)>0?u(r):s(e.url).then(u)})}function u(e){return m(e)===1&&{id:g(e)}}export{je as fromItem,T as selectLayerClassPath};
